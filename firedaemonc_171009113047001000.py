import os
import sys
import optparse
import configset

__version__ = "0.1"
__author__ = "licface"
__platform__ = "win32"
__email__ = "licface@yahoo.com"
__support__ = "all"


class firedaemon(object):

    def __init__(self):
        super(firedaemon, self)
        self.conf = configset.get_config_file(
            os.path.join(os.path.dirname(__file__), 'conf.ini'))

    def maker(self, name, directory, exe, paremeter=None, display_name=None, prefix=None, description=None, delay=None, startup=None, force_replace=None, reportlog=None):

        report_STDOUT = ''
        report_STDIN = ''
        report_PATH = configset.read_config(
            'FIREDAEMON', 'LOGS_PATH', self.conf)
        firedaemon_exe = configset.read_config(
            'FIREDAEMON', 'EXE_PATH', self.conf)
        if delay == None:
            delay = 3000
        if startup == None:
            startup = 0
        if force_replace == None:
            force_replace = 'true'
        if reportlog:
            report_STDIN = os.path.join(report_PATH, name) + '.debug.log'
            report_STDOUT = os.path.join(report_PATH, name) + '.stdout.log'
        data_format = (name, directory, exe, paremeter, display_name, prefix, description,
                       delay, startup, force_replace, reportlog, report_STDOUT, report_STDIN)
        MASTER_CONTENT = """
		<!-- Generated by PYTHON -->

<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<Service>
 <Program>
  <Name>{0}</Name>
  <DisplayName>{4}</DisplayName>
  <DisplayNamePrefix>{5}</DisplayNamePrefix>
  <Description>{6}</Description>
  <WorkingDir>{1}</WorkingDir>
  <Executable>{2}</Executable>
  <Parameters>{3}</Parameters>
  <Delay>{7}</Delay>
  <StartUpMode>{8}</StartUpMode>
  <ForceReplace>{9}</ForceReplace>
 </Program>
 <Options>
  <AffinityMask>0</AffinityMask>
  <Priority>0</Priority>
  <AppendLogs>true</AppendLogs>
  <EventLogging>true</EventLogging>
  <InteractWithDesktop>true</InteractWithDesktop>
  <PreLaunchDelay>0</PreLaunchDelay>
  <ConsoleApp>false</ConsoleApp>
  <CtrlC>0</CtrlC>
  <UponExit>1</UponExit>
  <UponFlap>0</UponFlap>
  <FlapCount>0</FlapCount>
  <UponFail>0</UponFail>
  <FailCount>0</FailCount>
  <ShutdownDelay>5000</ShutdownDelay>
  <PreShutdown>0</PreShutdown>
  <PreShutdownDelay>180000</PreShutdownDelay>
  <ShowWindow>1</ShowWindow>
  <JobType>0</JobType>
  <IgnoreFlags>3</IgnoreFlags>
 </Options>
 <RedirectIO>
  <Stdout>{12}</Stdout>
  <Stderr>ToStdout</Stderr>
 </RedirectIO>
 <Debug>
  <DebugEnabled>true</DebugEnabled>
  <DebugLocation>{11}</DebugLocation>
 </Debug>
 <SMF>
  <SMFEnabled>true</SMFEnabled>
  <SMFFrequency>5000</SMFFrequency>
 </SMF>
 <Scheduling>
  <StartTime>00:00:00</StartTime>
  <EndTime>00:00:00</EndTime>
  <RunDays>127</RunDays>
  <MonthFrom>0</MonthFrom>
  <MonthTo>0</MonthTo>
  <MonthDay>0</MonthDay>
  <RestartFreq>0</RestartFreq>
  <RestartEvery>60</RestartEvery>
  <RestartDelay>0</RestartDelay>
  <RestartTime>00:00:00</RestartTime>
 </Scheduling>
 <DlgResponder>
  <Enabled>false</Enabled>
  <CloseAll>false</CloseAll>
  <CheckFrequency>5000</CheckFrequency>
  <IgnoreUnknowns>true</IgnoreUnknowns>
  <LogFile></LogFile>
  <Responses>
  </Responses>
 </DlgResponder>
 <Recovery>
  <FirstFailure>1</FirstFailure>
  <SecondFailure>1</SecondFailure>
  <SubSequent>3</SubSequent>
  <ResetFailCountAfter>0</ResetFailCountAfter>
  <RestartServiceDelay>0</RestartServiceDelay>
  <RestartComputerDelay>0</RestartComputerDelay>
  <Program></Program>
  <CommandLineParams></CommandLineParams>
  <AppendFailCount>false</AppendFailCount>
  <EnableActionsForStopWithErrors>false</EnableActionsForStopWithErrors>
  <SendMsg>false</SendMsg>
  <RebootMsg></RebootMsg>
 </Recovery>
</Service>
""".format(*data_format)

        CONF_PATH = configset.read_config('FIREDAEMON', 'CONF_PATH', self.conf)

        f = open(os.path.join(CONF_PATH, name + ".xml"), 'w')
        f.write(MASTER_CONTENT)
        f.close()
        os.system(firedaemon_exe + " -i " +
                  os.path.join(CONF_PATH, name + ".xml"))

    def usage(self):
        parser = optparse.OptionParser()
        parser.add_option(
            '-n', '--name', help='Name of Service', action='store')
        parser.add_option('-y', '--display',
                          help='Display name of Service', action='store')
        parser.add_option('-p', '--prefix',
                          help='Display prefix', action='store')
        parser.add_option('-d', '--description',
                          help='Description Of Server', action='store')
        parser.add_option('-t', '--directory',
                          help='Working Directory', action='store')
        parser.add_option(
            '-e', '--exe', help='Executable Of Server', action='store')
        parser.add_option(
            '-s', '--paremeter', help='Parameter of service executable', action='store')
        parser.add_option(
            '-D', '--delay', help='Delay Time before start', action='store')
        parser.add_option('-S', '--startup',
                          help='Startup mode', action='store')
        parser.add_option('-F', '--force-replace',
                          help='Forece replace service', action='store_true')
        parser.add_option(
            '-r', '--reportlog', help='Store log STDOUT and STDIN in file directory based on Configuration file', action='store_true')
        parser.add_option('-c', '--edit-config',
                          help='Edit Config File', action='store')
        options, args = parser.parse_args()
        if len(sys.argv) == 1:
            parser.print_help()
        else:
            # name, directory, exe, paremeter=None, display_name=None,
            # prefix=None, description=None, delay=None, startup=None,
            # force_replace=None, reportlog=None
            if options.edit_config:
                os.popen(r'c:\exe\notepad2.exe' + ' ' +
                         os.path.join(os.path.dirname(__file__),  'conf.ini'))
            else:
                self.maker(options.name, options.directory, options.exe, options.paremeter, options.display, options.prefix,
                           options.description, options.delay, options.startup, options.force_replace, options.reportlog)


if __name__ == '__main__':
    c = firedaemon()
    c.usage()
